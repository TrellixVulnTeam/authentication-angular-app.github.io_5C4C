{"ast":null,"code":"import { BehaviorSubject, catchError, ReplaySubject, tap, throwError } from 'rxjs';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../users/user.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, userService) {\n      this.http = http;\n      this.router = router;\n      this.userService = userService;\n      this.signUpApi = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBDnfKTPgj67NNDItTUfUxbiKU6C4pYby8';\n      this.loggedInApi = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBDnfKTPgj67NNDItTUfUxbiKU6C4pYby8';\n      this._user = new BehaviorSubject(null);\n      this._successAuth = new ReplaySubject(1);\n    }\n\n    signUp(email, password) {\n      return this.http.post(this.signUpApi, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.errorHandler), tap(resData => {\n        const expirationDate = new Date(new Date().getTime() + +resData.expiresIn * 1000);\n        this.userService.addUser(resData.email, resData.localId, resData.idToken, expirationDate);\n        this.authHandler(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    loggedIn(email, password) {\n      return this.http.post(this.loggedInApi, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.errorHandler), tap(resData => {\n        this.authHandler(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    logout() {\n      this._user.next(null);\n\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n\n      if (this.expDurationTimer) {\n        clearTimeout(this.expDurationTimer);\n      }\n\n      this.expDurationTimer = null;\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this._user.next(loadedUser);\n\n        let expDurationLeft = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expDurationLeft);\n      }\n    }\n\n    autoLogout(exp_duration) {\n      this.expDurationTimer = setTimeout(() => {\n        this.logout();\n      }, exp_duration);\n    }\n\n    getObservableAuthState() {\n      return this._successAuth.asObservable();\n    }\n\n    authHandler(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, expirationDate);\n\n      this._user.next(user);\n\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    errorHandler(errorRes) {\n      let errorObj = {\n        status: 0,\n        message: '',\n        name: '',\n        messageHeader: ''\n      };\n\n      if (!errorRes.error || !errorRes.error.error) {\n        errorObj = {\n          status: errorRes.status,\n          message: errorRes.message,\n          name: errorRes.name\n        };\n        return throwError(errorObj);\n      }\n\n      if (errorRes.error.error.message) {\n        errorObj = {\n          status: errorRes.status,\n          message: errorRes.message,\n          name: errorRes.name,\n          messageHeader: errorRes.error.error.message\n        };\n      }\n\n      return throwError(errorObj);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UserService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}